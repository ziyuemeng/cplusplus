#include<iostream>
#include<map>
using namespace std;
template<class T,class M>
void print(map<T,M>& m){
    for(auto i:m)
        cout<<i.first<<':'<<i.second<<'\t'<<'\t';
    cout<<endl;
}
int main(){
    map<char,int> cimap = {                 //一定注意，定义一个图后，其自动按照键的大小进行排序，这可能就是构造函数里的compare的类的作用吧
	    {'z',90},
            {'a',41},
            {'b',42},
            {'m',48},
        };
    cimap[(char)'5'] = 8;
    cout<<cimap.at('a')<<endl;        //可以通过map.at(key)访问或者修改键的值
    print(cimap);
    map<char,int>::iterator it = cimap.begin();   //返回的是一个迭代器，输出元素的时候还是要用指针指向它的first和second
    cout<<it->first<<(*it).second<<endl;     //也可以用(*it).second访问元素，此时（*it）是一个object
    //map<char,int>::iterator it = cimap.end()     //此时map.end()指向的是map中最后一个对象的下一个元素！！！map中并未在迭代器中定义加（+）减（-）操作，因此不能使用it+1这种操作，但是可以用(*++it)这种方式来访问对象，使用时注意(*it++)与(*++it)的区别，
    cimpa.clear();              //清除map中所有元素
    cout<<cimap.count('m')<<endl;              //及记录key出现的次数
    cimap.emplace('o',55);                     //添加map元素的一种方式，但是要保证map中没有键与之对应
    print(cimap);
    cimap.enpty();                   //一般遍历的时候才会用到吧
    cimap.erase('z');                //擦除键值对 也可以用范围iterator erase( const_iterator first, const_iterator last );
    cimap.insert(pair<char,int>('n',30));     //插入一对元素，pari<T,M> 必不可少。   
    cout<<"using -- : "<<(*++(++(++(++end)))).first<<endl;   //虽然不能对map里的iterator进行类似（*it+1）的操作，但是可以进行(*++(++(++(++end)))).first类似的操作，可以从头或者从尾访问元素，可惜的是如果越界，其值会指向之前开辟但未来得及完全清除的地址的值
    cout<<(*cimap.lower_bound('b')).second<<endl;    //这花里胡哨的用法
    cout<<cimap['y']<<endl;            // [] 是专门用来访问键的值的，=  操作用于map间的相互赋值
    //if(cimap['y'] > cimap[a])          // !=  >   <    等操作是用来比较两个map的，且比较的是两个map中的键的值的关系
        //cout<<'y > a'<<endl;
    return 0;
}      